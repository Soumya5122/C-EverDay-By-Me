/*The minJumps function takes two parameters: arr, which is an array of integers representing the maximum length of
jumps that can be made forward from each element, and n, which is the size of the array.
We first check if the size of the array is 1. If it is, we return 0 as no jumps are required to reach the end of the array.
We then check if the first element of the array is 0. If it is, we return -1 as we cannot move from the first element, and 
hence, cannot reach the end of the array.
We initialize three variables:
maxReach: This variable keeps track of the maximum index that can be reached from the current position.
steps: This variable represents the number of steps we can take from the current position.
jumps: This variable keeps track of the minimum number of jumps required to reach the current position.
We initialize maxReach and steps with the value of the first element of the array (arr). We also initialize jumps with 1, as we start from the first element.
We iterate through the array starting from the second element (i = 1) until the second-to-last element (i < n - 1).
For each element, we update maxReach by taking the maximum of the current maxReach and the sum of the current index i and the value at index i (i + arr[i]). 
This ensures that we always choose the maximum reachable index.
We decrement steps by 1 to keep track of the remaining steps we can take from the current position.
If steps becomes 0, it means we have exhausted all the steps from the current position. In this case:
We increment jumps by 1 to account for the new jump.
If maxReach is less than or equal to i, it means we cannot reach the end of the array from the current position, so we return -1.
We update steps with the difference between maxReach and i, which represents the new number of steps we can take from the current position.
After the loop, we return jumps as the minimum number of jumps required to reach the end of the array.
The algorithm works by always choosing the maximum reachable index at each step and updating the number of jumps accordingly.
It ensures that we always make the maximum progress possible with the current jump and minimizes the total number of jumps required to reach the end of the array.
The time complexity of this solution is O(n), where n is the size of the input array, as we iterate through the array once.
The space complexity is O(1), as we only use a constant amount of extra space.*/
#include <iostream>
using namespace std;

class Solution{
public:
    int minJumps(int arr[], int n){
        if (n == 1) return 0;
        if (arr[0] == 0) return -1;
        
        int maxReach = arr[0];
        int steps = arr[0];
        int jumps = 1;
        
        for (int i = 1; i < n - 1; i++) {
            maxReach = max(maxReach, i + arr[i]);
            steps--;
            
            if (steps == 0) {
                jumps++;
                if (maxReach <= i) return -1;
                steps = maxReach - i;
            }
        }
        
        return jumps;
    }
};

int main() {
    // Example usage
    int arr1[] = {1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9};
    int n1 = sizeof(arr1) / sizeof(arr1[0]);
    Solution solution;
    int minJumps1 = solution.minJumps(arr1, n1);
    cout << "Minimum jumps: " << minJumps1 << endl; // Output: Minimum jumps: 3
    
    int arr2[] = {1, 4, 3, 2, 6, 7};
    int n2 = sizeof(arr2) / sizeof(arr2[0]);
    int minJumps2 = solution.minJumps(arr2, n2);
    cout << "Minimum jumps: " << minJumps2 << endl; // Output: Minimum jumps: 2
    
    int arr3[] = {0, 10, 20};
    int n3 = sizeof(arr3) / sizeof(arr3[0]);
    int minJumps3 = solution.minJumps(arr3, n3);
    cout << "Minimum jumps: " << minJumps3 << endl; // Output: Minimum jumps: -1
    
    return 0;
}
