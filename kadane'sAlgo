/*The algorithm works by iterating over the array and keeping track of the maximum sum of the subarray ending at each position.
At each position i, we have two options: either add the element at position i to the current maximum subarray or start a new
subarray at position i. The maximum of these two options is the maximum subarray ending at position i. We maintain two variables,
max_so_far and max_ending_here, to keep track of the maximum sum seen so far and the maximum sum ending at the current position, 
respectively. The algorithm starts by setting both variables to the first element of the array. Then, we iterate over the array
from the second element to the end*/
#include <iostream>
#include <vector>

class Solution {
public:
    // Function to find the sum of contiguous subarray with maximum sum.
    long long maxSubarraySum(vector<int>& arr) {
        long long maxSum = arr[0];
        long long currentSum = arr[0];
        
        for (int i = 1; i < arr.size(); i++) {
            currentSum = max((long long)arr[i], currentSum + arr[i]);
            maxSum = max(maxSum, currentSum);
        }
        
        return maxSum;
    }
};

int main() {
    //Example usage
    vector<int> arr1 = {-3, -4, 5, -1, 2, -4, 6, -1};
    Solution solution;
    long long maxSum1 = solution.maxSubarraySum(arr1);
    cout << "Maximum subarray sum: " << maxSum1 << endl; //Output: Maximum subarray sum: 8
    
    vector<int> arr2 = {1, 2, 3, -2, 5};
    long long maxSum2 = solution.maxSubarraySum(arr2);
    cout << "Maximum subarray sum: " << maxSum2 << endl; //Output: Maximum subarray sum: 9
    
    vector<int> arr3 = {-1, -2, -3, -4};
    long long maxSum3 = solution.maxSubarraySum(arr3);
    cout << "Maximum subarray sum: " << maxSum3 << endl; //Output: Maximum subarray sum: -1
    
    vector<int> arr4 = {5, 4, 7};
    long long maxSum4 = solution.maxSubarraySum(arr4);
    cout << "Maximum subarray sum: " << maxSum4 << endl; //Output: Maximum subarray sum: 16
    
    return 0;
}
